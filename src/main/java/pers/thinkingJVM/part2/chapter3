垃圾回收器和内存分配策略

    判断对象“已死”两种方式

        引用计数法
            对于任意一个对象，添加一个引用计数器，每一次引用他的时候，计数器加1；每一次引用失效是，计数器减1
            优点：虽然会产生额外的内存消耗，算法简单，易于计算（判定效率高）
            存在的问题：需要解决循环引用或者相互引用的问题

        可达性分析（GCRoot）
            对一个对象而言，如果其余GCRoot之间没有任何有效链接相连，则意味着该对象是无效的，可以进行GC
            可作为GCRoot的对象：
                虚拟机栈引用的对象
                方法区中类的static量
                方法区中类的常量池中的final量
                本地方法栈中JNI引用的对象
                虚拟机内部引用，Class对象，一些常驻的异常对象，系统类加载器
                任意被同步锁持有的对象

    引用的四种类型：  强引用，软引用，弱引用，虚引用

    方法区的回收：常量的回收和不再使用类型的回收
        判断一个常量或类型是否不再使用的依据
            该类的所有实例都已被回收，不存在该类及其任何派生子类的实例
            加载该类的类加载器已被回收
            该类对应Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法

垃圾回收算法

    分代收集理论
        弱分代假说：绝大多数的对象都是朝生夕死的
        强分代假说：熬过越多次垃圾回收器的对象越难消亡
        跨代引用假说：跨代引用对对于同代引用来说占极其少数












